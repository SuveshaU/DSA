OPTION 1
//array ( inefficient and has runtime n^2)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    for(int i = 0 ; i< nums.size()-1 ; i++){
     for(int j = 1 ; j<nums.size(); j++){
     if( nums[j]+nums[i] == target)
     return{i,j};
     
     }
    }
    return{};

    }
};


OPTION 2:
//hashtable(better)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int, int> numsMap;
    int n = nums.size();

    //build a hashtable or map with numbers as keys and positions as values
    for( int i = 0; i<n; i++){
        numsMap [nums[i]] = i;
    }

//find a compliment
for( int i = 0; i < n; i++){
int complement = target - nums[i];
if(numsMap.count(complement) && numsMap[complement] != i){
    return {i, numsMap[complement]};
}


}
return{};
    }
};
